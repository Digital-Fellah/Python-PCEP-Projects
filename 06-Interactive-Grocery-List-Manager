# Interactive Grocery List Manager
# This program allows users to manage their grocery list interactively.

# Initialize an empty list to store grocery items
grocery_list = []

# Function to display the current items in the grocery list
def display_list():
    if grocery_list:
        print("Grocery List:")
        for index, item in enumerate(grocery_list, 1):
            print(f"{index}. {item}")
    else:
        print("Your grocery list is empty.")

# Function to add a new item to the grocery list
def add_item(item):
    grocery_list.append(item)
    print(f"{item} added to your grocery list.")

# Function to remove an item from the grocery list
def remove_item(item):
    if item in grocery_list:
        grocery_list.remove(item)
        print(f"{item} removed from your grocery list.")
    else:
        print(f"{item} is not in your grocery list.")

# Function to clear all items from the grocery list
def clear_list():
    grocery_list.clear()
    print("Grocery list cleared.")

# Main loop to interact with the user
while True:
    print("\nOptions:")
    print("1. Display Grocery List")
    print("2. Add Item")
    print("3. Remove Item")
    print("4. Clear List")
    print("5. Exit")
    
    choice = input("Enter your choice (1-5): ")

    if choice == '1':
        display_list()
    elif choice == '2':
        item = input("Enter the item you want to add: ")
        add_item(item)
    elif choice == '3':
        item = input("Enter the item you want to remove: ")
        remove_item(item)
    elif choice == '4':
        clear_list()
    elif choice == '5':
        print("Exiting...")
        break
    else:
        print("Invalid choice. Please enter a number from 1 to 5.")

# End of program


"""
EXPLANATION OF THE CODE

The code begins by initializing an empty list grocery_list to store grocery items.
Functions are defined to handle various operations:
display_list(): Displays the current items in the grocery list.
add_item(item): Adds a new item to the grocery list.
remove_item(item): Removes a specified item from the grocery list if it exists.
clear_list(): Clears all items from the grocery list.
A main loop (while True) allows the user to interact with the program through a menu of options (display list, add item, remove item, clear list, exit).
Input validation ensures that the user's choice is within the valid range of options.
The program exits when the user chooses to exit (choice == '5').
"""


"""
NOTIONS COVERED

Lists: Used to store grocery items (grocery_list).
Indexing: Used in the display_list() function to enumerate and display items.
Appending: Used in add_item(item) to add items to the list.
Iterating with Loops: Used in display_list() to iterate through the list and display items.
Functions: Defined functions (display_list(), add_item(item), remove_item(item), clear_list()) to encapsulate operations.
List Comprehensions: Not directly used in this code snippet.
Copying and Cloning: Not used in this specific example.
Lists in Lists: Not used in this specific example.
Initializing Loops: Used with while True to create the main program loop.
In and Not In Operators: Used in remove_item(item) to check if an item exists in the list before removal.
"""
